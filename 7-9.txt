kill(all)$
print("Раздел 7")$
print("2.7")$
f(x,y):=(18*x^2*y^2+32*x^3*y^3);
int:'integrate('integrate(f(x,y),y,-sqrt(x),x^3),x,0,1)$
intex:integrate(integrate(f(x,y),y,-sqrt(x),x^3),x,0,1)$
print(int,"=",intex)$


kill(all)$
print("Раздел 8")$
print("2.7")$
v:6*sqrt(6)*x**3-6*sqrt(6)*y**3+2*z^3;
u:(x*z^2)/y;
M:[1/sqrt(6),1/sqrt(6),1];
px: M[1]$
py: M[2]$
pz: M[3]$
dv_x: diff(v,x)$
v_x(x,y,z):= ''dv_x;
dv_y: diff(v,y)$
v_y(x,y,z):= ''dv_y;
dv_z: diff(v,z)$
v_z(x,y,z):= ''dv_z;
du_x: diff(u,x)$
u_x(x,y,z):= ''du_x;
du_y: diff(u,y)$
u_y(x,y,z):= ''du_y;
du_z: diff(u,z)$
u_z(x,y,z):= ''du_z;
numerator: v_x(px,py,pz)*u_x(px,py,pz)
+v_y(px,py,pz)*u_y(px,py,pz)+v_z(px,py,pz)*u_z(px,py,pz)$
denominator: sqrt(v_x(px,py,pz)^2+v_y(px,py,pz)^2+v_z(px,py,pz)^2)
*sqrt(u_x(px,py,pz)^2+u_y(px,py,pz)^2+u_z(px,py,pz)^2)$
ans: numerator/denominator$
print("phi = ", ev(acos(ans),simp))$




kill(all)$
print(7.7)$
assume((-x**2+2*x+3)>0, x^2-2*x-2>0)$
a: (4*x-2*y^2)*i+(log(z)-4*y)*j+(x+(3*z)/4)*k$
S: x^2+y**2+z^2=2*x+3$
P(x,y,z):=(4*x-2*y^2)$
Q(x,y,z):=(log(z)-4*y)$
R(x,y,z):=(x+(3*z)/4)$
yplus_z0: sqrt(-x^2+2*x+3)$
/*wxplot2d(yplus_z0,[x,-5,5])$*/
yminus_z0: -sqrt(-x^2+2*x+3)$
zplus_xy: sqrt(-x^2-y^2+2*x+3)$
zminus_xy: -sqrt(-x^2-y^2+2*x+3)$
zplus(x,y):=sqrt(-x^2-y^2+2*x+3)$
dzplus_x:diff(zplus(x,y),x)$
dzplus_y:diff(zplus(x,y),y)$
n_norm:sqrt(dzplus_x**2+dzplus_y**2+1)$
F_vector:matrix([P(x,y,z)],[Q(x,y,z)],[R(x,y,z)])$
N_vector:matrix([-dzplus_x/n_norm],[-dzplus_y/n_norm],[1/n_norm])$
FN(x,y):=ev(F_vector.N_vector,z=zplus_xy)$
integral_value:integrate(integrate(FN(x,y),y,yminus_z0,yplus_z0),x,(2-sqrt(18))/2,(2+sqrt(18))/2)$
integral_print:'integrate('integrate(FN(x,y),y,yminus_z0,yplus_z0),x,(2-sqrt(18))/2,(2+sqrt(18))/2)$
print("P = ",integral_print,"=",integral_value)$





kill(all)$
print("Раздел 9")$
print("3.7")$
A: matrix([1],[-2],[5]);
B: matrix([3],[-1],[0]);
C1: 4*A-2*B;
C2: B-2*A;
ijk: matrix([i],[j],[k])$
M:matrix()$
M:addcol(M,ijk, C1, C2)$
ans:determinant(M)$
print(M, "=", ans)$
print("Векторы C1 и C2 неколлинеарны. Так как [С1,C2]!=0")$






kill(all)$
print("3.7")$
M1: matrix([1,2,-3])$
x1: M1[1][1]$ y1: M1[1][2]$ z1: M1[1][3]$
M2: matrix([1,0,1])$
x2: M2[1][1]$ y2: M2[1][2]$ z2: M2[1][3]$
M3: matrix([-2,-1,6])$
x3: M3[1][1]$ y3: M3[1][2]$ z3: M3[1][3]$
M0: matrix([3,-2,-9])$
M0x: M0[1][1]$ M0y: M0[1][2]$ M0z: M0[1][3]$
M1M2: M2-M1;
a1: M1M2[1][1]$ b1: M1M2[1][2]$ c1: M1M2[1][3]$
M1M3: M3-M1;
a2: M1M3[1][1]$ b2: M1M3[1][2]$ c2: M1M3[1][3]$
Amatrix: matrix([b1,c1],[b2,c2]);
Bmatrix: matrix([a1,c1],[a2,c2]);
Cmatrix: matrix([a1,b1],[a2,b2]);
A:determinant(Amatrix);
B:determinant(Bmatrix);
C:determinant(Cmatrix);
planeMatrix: matrix([x-x1,y-y1,z-z1],[x2-x1,y2-y1,z2-z1],[x3-x2,y3-y1,z3-z1]);
plane: determinant(planeMatrix);
planeF(x,y,z):= ''plane;
d: abs(planeF(M0x,M0y,M0z))/sqrt(A**2+B**2+C**2)$
print("D=", d)$







kill(all)$
print("Раздел 10")$
print("3.7")$
load("eigen")$
ex1: 12*x1-x2+7*x3+11*x4-x5=0$
ex2: 24*x1-2*x2+14*x3+22*x4-2*x5=0$
ex3: x1+x2+x3-x4+2*x5=0$
linEquation1: matrix([12,-1,7,11,-1],[24,-2,14,22,-2],[1,1,1,-1,2])$
rank1:rank(linEquation1)$
size1:5-rank1$

linsolve1_gen: linsolve([ex1,ex2,ex3],[x1,x2,x3,x4,x5])$
linsolve1: linsolve([ex1,ex2,ex3],[x1,x2,x3,x4,x5]), linsolve_params=false$


r1:append(map(rhs,ev(linsolve1,x3=1,x4=0,x5=0)),[1,0,0])$
r2:append(map(rhs,ev(linsolve1,x3=0,x4=1,x5=0)),[0,1,0])$
r3:append(map(rhs,ev(linsolve1,x3=0,x4=0,x5=1)),[0,0,1])$
basis:addcol(covect(r1),r2,r3)$
print("Система уравнений")$
print(ex1)$
print(ex2)$
print(ex3)$
print("Решение системы уравнений",linsolve1_gen)$
print("Размерность пространства : ",size1)$
print("Базис пространства решений однородно системы",basis)$;

kill(all)$
load("eigen")$
ex4: x1-2*x2+2*x3+3*x4=0$
ex5: 2*x1-3*x2+x3+4*x4=1$
ex6: 3*x1-5*x2+3*x3+7*x4=1$

linEquation2: matrix([1,-2,2,3],[2,-3,1,4],[3,-5,3,7])$
rank2:rank(linEquation2)$
size2:5-rank2$

linsolve2_gen: linsolve([ex4,ex5,ex6],[x1,x2,x3,x4])$
linsolve2: linsolve([ex4,ex5,ex6],[x1,x2,x3,x4]), linsolve_params=false$


r4:append(map(rhs,ev(linsolve2,x3=1,x4=0)),[1,0])$
r5:append(map(rhs,ev(linsolve2,x3=0,x4=1)),[0,1])$
basis2:addcol(covect(r4),r5)$
print("Система уравнений")$
print(ex4)$
print(ex5)$
print(ex6)$
print("Решение системы уравнений",linsolve2_gen)$
print("Размерность пространства : ",size2)$
print("Базис пространства решений однородно системы",basis2)$



r6:append(map(rhs,ev(linsolve2,x3=1,x4=1)),[1,1])$
priv_dec: covect(r6)$
print("Частное решение неоднородной системы: ", priv_dec)$





kill(all)$
print("7.7")$

A:matrix([1,3,0],[2,1,-1],[0,2,1])$
C:matrix([1,-1,-1],[-1,1,2],[1,-2,1])$
A\':(C^^-1).A.C$

print("A'=C^-1 * A * C = " , A\')$







kill(all)$
print("11.5")$
q:4*x_1**2+4*x_2**2+1*x_3**2+2*x_1*x_2-4*x_1*x_3+4*x_2*x_3;
A:matrix([4,1,-4],[1,4,2],[-4,2,1]);
ev:eigenvalues(A)$

q\':ev[1][1]*y_1**2+ev[1][2]*y_2**2+ev[1][3]*y_3**2;














kill(all)$
print("Задание 4")$
load("eigen")$
kABCD(eq):=(
[A,B,C,D],
eq:lhs(eq),
D:ev(eq,x=0,y=0,z=0),
A:ev(eq,x=1,y=0,z=0)-D,
B:ev(eq,x=0,y=1,z=0)-D,
C:ev(eq,x=0,y=0,z=1)-D,
[A,B,C,D]
)$
norm(eq):=(
[A,B,C,D],
eq:lhs(eq),
D:ev(eq,x=0,y=0,z=0),
A:ev(eq,x=1,y=0,z=0)-D,
B:ev(eq,x=0,y=1,z=0)-D,
C:ev(eq,x=0,y=0,z=1)-D,
[A,B,C]
)$

point_inter(a,M,S):=(
[root:0],
root:solve(ev(lhs(a),x=M[1]+S[1]*t,y=M[2]+S[2]*t,z=M[3]+S[3]*t)=0,t),
root:rhs(root[1]),
[M[1]+S[1]*root,M[2]+S[2]*root,M[3]+S[3]*root]
)$

point_line(L):=[ev(rhs(L[1]),t=0),ev(rhs(L[2]),t=0),ev(rhs(L[3]),t=0)]$
s_line(L):=[coeff(rhs(L[1]),t),coeff(rhs(L[2]),t),coeff(rhs(L[3]),t)]$

print("Прямая задана в параметрическом виде")$
L:[x=1,y=2+3*t,z=3+4*t]$
a:1*x+2*y+3*z+15=0$
f(a,L):=(
[s_p,alpha:0,M:0,h:0,k:kABCD(a),n:norm(a),s:s_line(L),a_l:lhs(a),M_0:point_line(L)],
if covect(n).covect(s)=0 and ev(a_l,x=L[1][1],y=L[1][2],z=L[1][3])=0 then
    print("Прямая лежит на плоскости")
elseif n.s=0 then (
    print("Прямая параллельна плоскости"),
    h:abs(k[4] - (n[1]*s[1]+n[2]*s[2]+n[3]*s[3])),
    print("h = ",h),
    h
    )
else (
    print("Прямая пересекает плоскость"),
    M:point_inter(a,M_0,s),
    print(""),
    alpha:asin((covect(n).covect(s))/(sqrt(covect(n).covect(n))*sqrt(covect(s).covect(s)))),
    s_p:s*cos(alpha),
    print("Точка пересечения M = ",M ),
    print("Угол между прямой и плоскостью α = ",alpha),
    print("Проекция прямой состоит из точки и направляющего вектора"),
    print('M_0,"=",M),
    print('s_p,"=",s_p)
    )
)$
f(a,L)$





kill(all)$
print("Задание 5")$
kill(all)$
kABCD(eq):=(
[A,B,C,D],
eq:lhs(eq),
D:ev(eq,x=0,y=0,z=0),
A:ev(eq,x=1,y=0,z=0)-D,
B:ev(eq,x=0,y=1,z=0)-D,
C:ev(eq,x=0,y=0,z=1)-D,
[A,B,C,D]
)$
norm(eq):=(
[A,B,C,D],
eq:lhs(eq),
D:ev(eq,x=0,y=0,z=0),
A:ev(eq,x=1,y=0,z=0)-D,
B:ev(eq,x=0,y=1,z=0)-D,
C:ev(eq,x=0,y=0,z=1)-D,
[A,B,C]
)$

a_1:1*x+2*y+3*z+4=0$
a_2:5*x+4*y+3*z+8=0$
M:[-10,-20,30]$

point_p(a,M):=(
    [x:0,y:0,z:0,k:kABCD(a)],
    x:((k[2]**2+k[3]**2)*M[1]-k[1]*k[2]*M[2]-k[1]*k[3]*M[3]-k[1]*k[4])/(k[1]**2+k[2]**2+k[3]**2),
    y:(-k[1]*k[2]*M[1]+(k[1]**2+k[3]**2)*M[2]-k[2]*k[3]*M[3]-k[1]*k[4])/(k[1]**2+k[2]**2+k[3]**2),
    z:(-k[1]*k[3]*M[1]-k[2]*k[3]*M[2]+(k[1]**2+k[2]**2)*M[3]-k[3]*k[4])/(k[1]**2+k[2]**2+k[3]**2),
    [x,y,z]
)$

f(a1,a2,M):=(
[M_01:0,M_02:0,s1:0,s2:2,n1:norm(a1),n2:norm(a2)],
if ev(lhs(a1),x=M[1],y=M[2],z=M[3])=0 and ev(lhs(a2),x=M[1],y=M[2],z=M[3])=0 then
    print("Точка лежит на пересечении плоскостей")
elseif ev(lhs(a1),x=M[1],y=M[2],z=M[3])=0 then
    print("Точка лежит в первой плоскости " , a1)
elseif ev(lhs(a2),x=M[1],y=M[2],z=M[3])=0 then
    print("Точка лежит во второй плоскости ", a2)
else
    print("Точка лежит вне плоскотей"),
    M_01:point_p(a1,M),
    M_02:point_p(a2,M),
    print("Проекция точки на плоскость",a1,'M_01,"=",M_01),
    s1:M-M_01,

    if s1.n1>0 then print("Точка лежит сверху плоскости")
    else print("Точка лежит снизу плоскости"),
    print("Проекция точки на плоскость",a2,'M_02,"=",M_02),
    s2:M-M_02,
    if s2.n1>0 then print("Точка лежит сверху плоскости")
    else print("Точка лежит снизу плоскости"),
    [M_01,M_02]

)$
f(a_1,a_2,M);
